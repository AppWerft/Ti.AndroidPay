/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.androidpayment;

import java.math.BigDecimal;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiC;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.view.TiCompositeLayout;
import org.appcelerator.titanium.view.TiCompositeLayout.LayoutArrangement;
import org.appcelerator.titanium.view.TiUIView;

import android.app.Activity;

import com.google.android.gms.wallet.Cart;
import com.google.android.gms.wallet.FullWalletRequest;
import com.google.android.gms.wallet.LineItem;
import com.google.android.gms.wallet.MaskedWalletRequest;
import com.google.android.gms.wallet.NotifyTransactionStatusRequest;
import com.google.android.gms.wallet.PaymentMethodTokenizationParameters;

// This proxy can be created by calling Androidpayment.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule = AndroidpaymentModule.class)
public class LineItemProxy extends KrollProxy {
	// Standard Debugging variables
	private static final String LCAT = "ExampleProxy";
	private static final boolean DBG = TiConfig.LOGD;

	public LineItem item;

	// Constructor
	public LineItemProxy() {
		super();
	}

	// Handle creation options
	@Override
	public void handleCreationDict(KrollDict opts) {
		String currencyCode = "USD";
		String description = "";
		int quantity = 1;
		int role;
		BigDecimal totalPrice = BigDecimal.ZERO;
		BigDecimal unitPrice = BigDecimal.ZERO;
		super.handleCreationDict(opts);
		if (opts.containsKeyAndNotNull("CurrencyCode")) {
			currencyCode = opts.getString("CurrencyCode");
		}
		if (opts.containsKeyAndNotNull("UnitPrice")) {
			unitPrice = new BigDecimal(opts.getDouble("UnitPrice"));
		}
		if (opts.containsKeyAndNotNull("Quantity")) {
			quantity = opts.getInt("quantity");
		}
		if (opts.containsKeyAndNotNull("Role")) {
			role = opts.getInt("Role");
		}
		if (opts.containsKeyAndNotNull("Description")) {
			description = opts.getString("Description");
		}
		item = LineItem
				.newBuilder()
				.setCurrencyCode(currencyCode)
				.setDescription(description)
				.setQuantity(String.valueOf(quantity))
				.setUnitPrice(String.valueOf(unitPrice))
				.setTotalPrice(
						String.valueOf(unitPrice.multiply(new BigDecimal(
								quantity)))).build();
	}

	public LineItem getItem() {
		return item;
	}

}